#!/usr/bin/env sh

#-Wrapper for controlling volume, makes bluetooth and computer volume the same

[ ! "$1" ] && echo "sound_control [u/d/m/t]" && echo " [u]p [d]own [m]ute [t]oggle" && exit

opt="$1"; shift

sinks=$(pactl list short sinks | awk '{print $1}')
sink1=$(pactl list sinks | grep "Sink #1")

volume_up()
{
 	wpctl set-volume -l 1 @DEFAULT_AUDIO_SINK@ 5%+
	# pactl set-sink-volume "$s" +5%
	# [ "$sink1" ] && pactl set-sink-volume "$sink1" +5%
	# [ $(pgrep dwm) ] && reloadbar
}

volume_down()
{
 	wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
	# pactl set-sink-volume "$s" -5%
	# [ "$sink1" ] &&  pactl set-sink-volume "$sink1" -5%
	# [ $(pgrep dwm) ] && reloadbar
}

mute()
{
 	wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
	# pactl set-sink-mute "$s" toggle
	# [ "$sink1" ] && pactl set-sink-mute "$sink1" toggle
	# [ $(pgrep dwm) ] && reloadbar
}

send_notification()
{
	fill_char="─"
	blank_char="╶"
	fill_char_bold="━"
	blank_char_bold="╸"
	volume_string=$(wpctl get-volume @DEFAULT_AUDIO_SINK@)
	muted=$(echo "$volume_string" | awk '{print $3}')
	volume=$(echo "$volume_string" | awk '{print int($2 * 100)}')
	filled=$((volume / 5))
	empty=$((20 - filled))

	if [ -n "$muted" ]; then
		notify-send -t 1000 -h string:x-canonical-private-synchronous:volume "Volume" "Mute"
	else
		bar=""
		for ((i = 0; i < filled; i++)); do
			bar+="$fill_char"
		done
		for ((i = 0; i < empty; i++)); do
			bar+="$blank_char"
		done
		notify-send -t 1000 -h string:x-canonical-private-synchronous:volume "Volume ${volume}%" "$bar"
	fi
}

if [ "$opt" == 't' ]
then
	sound_manager -t
else
	# for s in $sinks
	# do
		case "$opt" in
			u) volume_up ;;
			d) volume_down ;;
			m) mute ;;
			*) echo "Invalid option" ;;
		esac
		#send_notification
	# done
fi

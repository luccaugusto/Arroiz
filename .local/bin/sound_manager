#!/bin/python3

from sys import exit
from argparse import ArgumentParser
from typing import Any
from os import environ, system
from subprocess import run, PIPE, DEVNULL
import json
from pathlib import Path

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class CardType:
    OUTPUT = "output"
    INPUT = "input"
    IO = "io"

    @staticmethod
    def from_string(type_str: str) -> str:
        type_map = {
            "output": CardType.OUTPUT,
            "input": CardType.INPUT,
            "io": CardType.IO
        }
        return type_map.get(type_str.lower(), CardType.OUTPUT)

class Card:
    @staticmethod
    def get_display_name(properties) -> str:
        name = properties.get("alsa.card_name", "")
        if name:
            return name

        return properties.get("device.alias", properties.get("device.product.name", ""))

    def __init__(self, profile_name, profile, card_name, sink_name, active=False, display_name=""):
        self.profile_name = profile_name
        self.profile = profile
        self.card_name = card_name
        self.sink_name = sink_name
        self.active = active
        self.display_name = display_name


def get_priority_profile(
    card: dict[str, Any]
) -> tuple[str | None, dict | None]:
    """
    Selects the profile with the highest priority from a list of profiles.
    Assumes that the profiles passed in are already filtered for availability and type.
    """
    priority_profile = None
    priority_profile_name = None
    max_priority = -1

    for name, profile in card.get("profiles", {}).items():
        if profile.get("priority", 0) > max_priority:
            max_priority = profile.get("priority", 0)
            priority_profile = profile
            priority_profile_name = name

    return priority_profile_name, priority_profile


def get_cards() -> list[dict[str, Any]]:
    cards_json = run(["pw-dump"], stdout=PIPE).stdout.decode()
    cards = json.loads(cards_json)
    # Filter only PipeWire Device interfaces
    return [card for card in cards if card.get("type") == "PipeWire:Interface:Device"]


def current_sink() -> str:
    sinks = run(["pw-dump"], stdout=PIPE).stdout.decode()
    all_sinks = json.loads(sinks)

    # First find the default sink ID
    default_sink_name = None
    for metadata in [s for s in all_sinks if s.get("type") == "PipeWire:Interface:Metadata"]:
        metadata_list = metadata.get("metadata", [])
        for item in metadata_list:
            if item.get("key") == "default.audio.sink":
                default_sink_name = item["value"]["name"]
                break
        if default_sink_name:
            break

    if not default_sink_name:
        return ""

    # Then find the corresponding device/card name
    for sink in all_sinks:
        if (sink.get("type") == "PipeWire:Interface:Node" and
            sink.get("info", {}).get("props", {}).get("node.name") == default_sink_name):
            return sink["info"]["props"].get("alsa.card_name", "")

    return ""


def current_source() -> str:
    sources = run(["pw-dump"], stdout=PIPE).stdout.decode()
    all_sources = json.loads(sources)

    # Find the default source
    default_source_name = None
    for metadata in [s for s in all_sources if s.get("type") == "PipeWire:Interface:Metadata"]:
        metadata_list = metadata.get("metadata", [])
        for item in metadata_list:
            if item.get("key") == "default.audio.source":
                default_source_name = item["value"]["name"]
                break
        if default_source_name:
            break

    if not default_source_name:
        return ""

    # Then find the corresponding device/card name
    for source in all_sources:
        if (source.get("type") == "PipeWire:Interface:Node" and
            source.get("info", {}).get("props", {}).get("node.name") == default_source_name):
            return source["info"]["props"].get("alsa.card_name", "")

    return ""


def set_card_profile(sink_name: str, profile: str) -> None:
    # Use pactl instead of pw-cli for setting card profiles
    run(["pactl", "set-card-profile", sink_name, profile])


def disable_cards(cards, exception) -> None:
    for card in cards:
        if card != exception:
            run(["pactl", "set-card-profile", card, "off"])


# TODO: if card is used as input, set it for IO instead of only output
def decide_card(cards: dict, device_in_use: str, card_type: str) -> Card:
    config_path = get_config_path()
    if not config_path.exists():
        raise Exception("Configuration file not found. Please run with --configure first.")

    with open(config_path) as f:
        config = json.load(f)

    profiles = config.get(card_type, None)
    if profiles is None:
        raise Exception(f"No {card_type} profiles configured. Please run with --configure first.")

    # Filter profiles to only include cards that are currently available
    available_profiles = [p for p in profiles if p["card_name"] in cards]

    if not available_profiles:
        raise Exception(f"No configured {card_type} devices are currently available")

    # Find the current profile in the config and return the next one
    profile_to_use = None
    for i, profile in enumerate(available_profiles):
        if profile["card_name"] == device_in_use:
            profile_to_use = available_profiles[(i + 1) % len(available_profiles)]
            break

    if profile_to_use is None:
        profile_to_use = available_profiles[0]

    # Find the matching card to get the sink name
    matching_card = cards.get(profile_to_use["card_name"])
    sink_name = matching_card.sink_name if matching_card else profile_to_use.get("card_name", "")

    return Card(
        profile_to_use["profile"],
        {"name": profile_to_use["profile"], "available": True, "priority": 1},
        profile_to_use["card_name"],
        sink_name,
        active=True,
        display_name=profile_to_use["card_name"],
    )

def hdmi_connected():
    xorg_running = run(["pgrep", "Xorg"], stdout=DEVNULL).returncode == 0

    if xorg_running:
        monitors = run(
            ["xrandr", "--listactivemonitors"], stdout=PIPE
        ).stdout.decode()
    else:
        monitors = run(
            ["hyprctl", "monitors"], stdout=PIPE
        ).stdout.decode()

    return monitors.find("HDMI") != -1 or monitors.find("DP-2-") != -1 or monitors.find("DP-3") != -1

def get_card_profiles_by_type(card: dict[str, Any], card_type: str) -> list[dict[str, Any]]:
    card_info = card.get("info", {})
    card_attributes = card_info.get("params", {})
    profiles = card_attributes.get("EnumProfile", [])

    # Filter profiles based on type and availability
    matching_profiles = []
    for p in profiles:
        if p.get("available", 'no') == 'no':
            continue

        # Get profile classes
        classes = p.get("classes", [])
        
        has_sink = any("Audio/Sink" in str(c) for c in classes)
        has_source = any("Audio/Source" in str(c) for c in classes)

        if card_type == CardType.OUTPUT:
            if has_sink and not has_source:
                matching_profiles.append(p)
                
        elif card_type == CardType.INPUT:
            if has_source and not has_sink:
                matching_profiles.append(p)
                
        elif card_type == CardType.IO:
            if has_sink and has_source:
                matching_profiles.append(p)

    return matching_profiles

def get_card_profiles_by_type_non_exclusive(card: dict[str, Any], card_type: str) -> list[dict[str, Any]]:
    """
    Similar to get_card_profiles_by_type but returns profiles non-exclusively.
    For example, a profile with both sink and source will be returned for OUTPUT type,
    whereas the exclusive version would only return it for IO type.
    This is mainly used for configuration to show all possible options.
    """
    card_info = card.get("info", {})
    card_attributes = card_info.get("params", {})
    profiles = card_attributes.get("EnumProfile", [])

    # Filter profiles based on type and availability
    matching_profiles = []
    for p in profiles:
        if p.get("available", 'no') == 'no':
            continue

        # Get profile classes
        classes = p.get("classes", [])
        
        has_sink = any("Audio/Sink" in str(c) for c in classes)
        has_source = any("Audio/Source" in str(c) for c in classes)

        if card_type == CardType.OUTPUT:
            if has_sink:  # Include if it has sink, regardless of source
                matching_profiles.append(p)
                
        elif card_type == CardType.INPUT:
            if has_source:  # Include if it has source, regardless of sink
                matching_profiles.append(p)
                
        elif card_type == CardType.IO:
            if has_sink and has_source:  # Keep IO exclusive since it needs both
                matching_profiles.append(p)

    return matching_profiles

def get_configured_cards_by_type(config: dict, card_type: str, all_cards: list[dict[str, Any]], card_in_use: str) -> dict[str, Card]:
    """
    Returns a dictionary of cards built from the user's configuration.
    """
    cards = {}
    configured_profiles = config.get(card_type, [])
    
    # Create a lookup for all available cards
    available_cards_map = {
        card.get("info", {}).get("props", {}).get("alsa.card_name", card.get("info", {}).get("props", {}).get("device.product.name", "")): card
        for card in all_cards
    }

    for conf_profile in configured_profiles:
        card_name = conf_profile["card_name"]
        profile_name = conf_profile["profile"]
        
        # Only add cards that are currently available
        if card_name in available_cards_map:
            card_data = available_cards_map[card_name]
            card_info = card_data.get("info", {})
            card_attributes = card_info.get("props", {})
            display_name = Card.get_display_name(card_attributes)
            sink = card_attributes.get("device.name", "")

            cards[f"{card_name}_{profile_name}"] = Card(
                profile_name,
                {"name": profile_name, "available": True, "priority": 1},
                card_name,
                sink,
                active=card_name in card_in_use,
                display_name=display_name,
            )
            
    return cards

def get_default_cards_by_type(all_cards: list[dict[str, Any]], card_type: str, card_in_use: str, configured_cards: list[str]) -> dict[str, Card]:
    """
    Gets the default (highest priority) profile for cards that are not already configured by the user.
    """
    cards = {}
    for card in all_cards:
        card_info = card.get("info", {})
        card_attributes = card_info.get("props", {})
        card_name = card_attributes.get("alsa.card_name", card_attributes.get("device.product.name", ""))

        if card_name in configured_cards:
            continue

        display_name = Card.get_display_name(card_attributes)
        profiles = get_card_profiles_by_type(card, card_type)
        if not profiles:
            continue
            
        profile_name, profile = get_priority_profile({"profiles": {p["name"]: p for p in profiles}})
        if profile is None:
            continue

        sink = card_attributes.get("device.name", "")
        cards[card_name] = Card(
            profile_name,
            profile,
            card_name,
            sink,
            active=sink in card_in_use,
            display_name=display_name if display_name is not None else card_name,
        )
    return cards

def get_cards_by_type(all_cards: list[dict[str, Any]], card_type: str, card_in_use: str, config: dict) -> dict[str, Card]:
    # First, get cards from the configuration
    configured_cards = get_configured_cards_by_type(config, card_type, all_cards, card_in_use)
    
    # Then, get default profiles for cards not in the configuration
    configured_card_names = [c.card_name for c in configured_cards.values()]
    default_cards = get_default_cards_by_type(all_cards, card_type, card_in_use, configured_card_names)
    
    # Merge the two dictionaries
    configured_cards.update(default_cards)
    return configured_cards

def get_all_card_profiles_by_type(all_cards: list[dict[str, Any]], card_type: str, non_exclusive: bool = False) -> dict[str, Any]:
    cards_with_profiles = {}

    for card in all_cards:
        card_info = card.get("info", {})
        card_attributes = card_info.get("props", card_info.get("params", {}))
        card_name = card_attributes.get("alsa.card_name", card_attributes.get("device.name", ""))

        # Use non-exclusive function for configuration
        if non_exclusive:
            matching_profiles = get_card_profiles_by_type_non_exclusive(card, card_type)
        else:
            matching_profiles = get_card_profiles_by_type(card, card_type)

        if matching_profiles:
            cards_with_profiles[card_name] = matching_profiles

    return cards_with_profiles

def get_config_path() -> Path:
    config_dir = Path(environ.get("XDG_CONFIG_HOME", Path.home() / ".config"))
    return config_dir / "sound_manager" / "config.json"

def save_card_config(config: dict) -> None:
    config_path = get_config_path()
    config_path.parent.mkdir(parents=True, exist_ok=True)

    system('clear')
    print(f"{Colors.BOLD}{Colors.HEADER}Saving priority order{Colors.ENDC}")
    for device_type, profiles in config.items():
        if not profiles:
            continue
        print(f"\n\t{Colors.OKCYAN}{device_type.upper()}{Colors.ENDC}")
        for i, profile in enumerate(profiles, 1):
            alias_str = f" (alias: {Colors.WARNING}{profile.get('alias')}{Colors.ENDC})" if profile.get('alias') else ""
            print(f"\t{Colors.OKGREEN}{i}.{Colors.ENDC} {profile['card_name']} - {profile['profile']}{alias_str}")

    with open(config_path, "w") as f:
        json.dump(config, f, indent=2)

    print(f"\n{Colors.OKGREEN}Configuration saved to {config_path}{Colors.ENDC}")

def configure_cards(all_cards: list[dict[str, Any]]) -> None:
    system('clear')
    print(f"{Colors.BOLD}{Colors.HEADER}Configuring sound profile preference list{Colors.ENDC}")
    print(f"{Colors.WARNING}Run this with all sound devices connected so you can configure all your options{Colors.ENDC}\n")

    config_path = get_config_path()
    config = {}
    if config_path.exists():
        with open(config_path) as f:
            try:
                config = json.load(f)
            except json.JSONDecodeError:
                print(f"{Colors.WARNING}Warning: could not parse existing config, starting fresh.{Colors.ENDC}")
                pass

    # Handle output, input, and io configurations separately
    for card_type in (CardType.OUTPUT, CardType.INPUT, CardType.IO):
        system('clear')
        config.setdefault(card_type, [])
        cards_with_profiles = get_all_card_profiles_by_type(all_cards, card_type, non_exclusive=True)

        current_config_for_type = config.get(card_type, [])
        
        # Build a list of unique available profiles from connected devices
        available_card_profiles = []
        seen_profiles = set()
        for card_name, profiles in cards_with_profiles.items():
            for profile in profiles:
                profile_key = (card_name, profile["name"])
                if profile_key not in seen_profiles:
                    available_card_profiles.append(profile_key)
                    seen_profiles.add(profile_key)

        print(f"{Colors.BOLD}{Colors.OKCYAN}Configuring {card_type.upper()} profiles{Colors.ENDC}")
        
        # Display currently configured profiles
        print(f"\n{Colors.OKBLUE}Currently configured profiles:{Colors.ENDC}")
        if not current_config_for_type:
            print("\tNone")
        else:
            for i, profile in enumerate(current_config_for_type, 1):
                alias_str = f" (alias: {Colors.WARNING}{profile['alias']}{Colors.ENDC})" if profile.get("alias") else ""
                print(f"\t{Colors.OKGREEN}{i}.{Colors.ENDC} {profile['card_name']} - {profile['profile']}{alias_str}")

        print(f"\n{Colors.OKBLUE}Available profiles on connected devices:{Colors.ENDC}")
        if not available_card_profiles:
            print("\tNone")
        else:
            for i, (card_name, profile_name) in enumerate(available_card_profiles, 1):
                print(f"\t{Colors.OKGREEN}{i}.{Colors.ENDC} {card_name} - {profile_name}")

        order = None
        while order is None:
            try:
                print(f"\n{Colors.BOLD}{Colors.WARNING}Enter new priority order for {card_type}{Colors.ENDC} (e.g., '3,1,2')")
                print(f"{Colors.WARNING}Append aliases with ':' (e.g., '1:main,2:headphones'). Leave empty to keep current config.{Colors.ENDC}")
                order_input = input(f"{Colors.BOLD}New {card_type} priority: {Colors.ENDC}")
                if not order_input.strip():
                    break

                order = []
                new_profile_list = []
                
                for o in order_input.split(","):
                    alias = None
                    number_str = o
                    if ":" in o:
                        number_str, alias = o.split(":", 1)
                    
                    number = int(number_str) - 1

                    if not (0 <= number < len(available_card_profiles)):
                        raise ValueError("Invalid profile number.")
                        
                    card_name, profile_name = available_card_profiles[number]
                    new_profile_list.append({
                        "card_name": card_name,
                        "profile": profile_name,
                        "alias": alias,
                    })
                
                # Replace the configuration for the current card type
                config[card_type] = new_profile_list
                break

            except ValueError as e:
                print(f"{Colors.FAIL}Invalid input: {e}. Please try again.{Colors.ENDC}")
            except KeyboardInterrupt:
                print(f"\n{Colors.WARNING}Configuration cancelled.{Colors.ENDC}")
                return

    if config:
        save_card_config(config)

def _parse_args():
    ap = ArgumentParser(
        "sound_manager",
        description="Manage sound profiles",
    )
    ap.add_argument(
        "-l", help="List available output and input devices", action="store_true"
    )
    ap.add_argument(
        "-f", help="Format cards info from stdin", action="store_true",
    )
    ap.add_argument("-t", help="Toggle output devices", action="store_true")
    ap.add_argument("-s", nargs=4, metavar=('sink', 'profile', 'card_name', 'card_type ["input", "output", "io"]'), help="Set sink profile manually")
    ap.add_argument(
        "-c", "--configure",
        help="Configure card profiles",
        action="store_true"
    )
    return ap

def list_cards(output_cards, input_cards, io_cards):
    # Try to read config file for aliases
    config_path = get_config_path()
    aliases = {}
    if config_path.exists():
        try:
            with open(config_path) as f:
                config = json.load(f)
                # Build aliases dictionary from all configurations
                for card_type in [CardType.OUTPUT, CardType.INPUT, CardType.IO]:
                    for profile in config.get(card_type, []):
                        if profile.get("alias"):
                            aliases[f"{profile['card_name']}:{profile['profile']}"] = profile["alias"]
        except:
            pass  # If there's any error reading config, proceed without aliases

    # Helper function to get card info with possible alias
    def get_card_info(card):
        card_dict = card.__dict__.copy()
        card_key = f"{card.card_name}:{card.profile_name}"
        if card_key in aliases:
            card_dict["display_name"] = aliases[card_key]
        return card_dict

    cards_info = {
        "output": [get_card_info(o) for o in output_cards.values()],
        "input": [get_card_info(o) for o in input_cards.values()],
        "io": [get_card_info(o) for o in io_cards.values()],
    }
    print(json.dumps(cards_info))


# TODO: decide_input
if __name__ == "__main__":
    arg_parser = _parse_args()
    args = arg_parser.parse_args()

    sink_in_use = current_sink()
    source_in_use = current_source()

    all_cards = get_cards()

    config_path = get_config_path()
    config = {}
    if config_path.exists():
        with open(config_path) as f:
            try:
                config = json.load(f)
            except json.JSONDecodeError:
                pass # Ignore if config is broken

    output_cards = get_cards_by_type(all_cards, CardType.OUTPUT, sink_in_use, config)
    input_cards = get_cards_by_type(all_cards, CardType.INPUT, source_in_use, config)
    io_cards = get_cards_by_type(all_cards, CardType.IO, sink_in_use, config)
    output_changed = False
    input_changed = False

    if args.t:
        card_to_use = decide_card({**output_cards, **io_cards}, sink_in_use, CardType.OUTPUT)
        # TODO: Output card is being used as input, set it as IO
        output_changed = True
    elif args.s:
        sink, profile, card_name, card_type = args.s
        card_to_use = Card(
            profile,
            {"name": profile, "available": 'yes', "priority": 1},
            card_name,
            sink,
        )
        output_changed = card_type.lower() == CardType.OUTPUT or card_type.lower() == CardType.IO
        input_changed = card_type.lower() == CardType.INPUT or card_type.lower() == CardType.IO
    elif args.l or args.f:
        list_cards(output_cards, input_cards, io_cards)
        exit(0)
    elif args.configure:
        configure_cards(all_cards)
        exit(0)
    else:
        arg_parser.print_help()
        exit(0)

    # turn off other cards
    if output_changed:
        for name, output_card in output_cards.items():
            if card_to_use.card_name == name:
                continue
            set_card_profile(output_card.sink_name, "off")

    if input_changed:
        for name, input_card in input_cards.items():
            if card_to_use.card_name == name:
                continue
            set_card_profile(input_card.sink_name, "off")

    set_card_profile(card_to_use.sink_name, card_to_use.profile_name)

    card_type = "IO" if output_changed and input_changed else "Output" if output_changed else "Input"
    notification_header = f"Switched {card_type}"
    notification_body = card_to_use.card_name
    run(["notify-send", notification_header, notification_body])

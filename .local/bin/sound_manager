#!/bin/python3

from sys import exit
from argparse import ArgumentParser
from typing import Any
from os import environ
from subprocess import run, PIPE, DEVNULL
import json
from pathlib import Path

class CardType:
    OUTPUT = "output"
    INPUT = "input"
    IO = "io"

    @staticmethod
    def from_string(type_str: str) -> str:
        type_map = {
            "output": CardType.OUTPUT,
            "input": CardType.INPUT,
            "io": CardType.IO
        }
        return type_map.get(type_str.lower(), CardType.OUTPUT)

class Card:
    @staticmethod
    def get_display_name(properties) -> str:
        name = properties.get("alsa.card_name", "")
        if name:
            return name

        return properties.get("device.alias", properties.get("device.product.name", ""))

    def __init__(self, profile_name, profile, card_name, sink_name, active=False, display_name=""):
        self.profile_name = profile_name
        self.profile = profile
        self.card_name = card_name
        self.sink_name = sink_name
        self.active = active
        self.display_name = display_name


def get_priority_profile(
    card: dict[str, Any], type: str = CardType.OUTPUT
) -> tuple[str | None, dict | None]:
    priority_profile = {}
    priority_profile_name = ""
    profiles = []

    if type == CardType.OUTPUT:
        profiles = [(name, p) for name, p in card["profiles"].items() if
            (
                any("Audio/Sink" in str(c) and "Audio/Source" not in str(c) for c in p.get("classes", [])) and
                p.get("available", 'no') != 'no'
            )]
    elif type == CardType.INPUT:
        profiles = [(name, p) for name, p in card["profiles"].items() if
            (
                any("Audio/Source" in str(c) and "Audio/Sink" not in str(c) for c in p.get("classes", [])) and
                p.get("available", 'no') != 'no'
            )]
    elif type == CardType.IO:
        profiles = [(name, p) for name, p in card["profiles"].items() if
            (
                any("Audio/Source" in str(c) for c in p.get("classes", [])) and
                any("Audio/Sink" in str(c) for c in p.get("classes", [])) and
                p.get("available", 'no') != 'no'
            )]

    if len(profiles) == 0:
        return None, None

    for name, profile in profiles:
        if profile.get("available", 'no') != 'no' and profile.get("priority", 0) > priority_profile.get("priority", -1):
            priority_profile_name = name
            priority_profile = profile

    return priority_profile_name, priority_profile


def get_cards() -> list[dict[str, Any]]:
    cards_json = run(["pw-dump"], stdout=PIPE).stdout.decode()
    cards = json.loads(cards_json)
    # Filter only PipeWire Device interfaces
    return [card for card in cards if card.get("type") == "PipeWire:Interface:Device"]


def current_sink() -> str:
    sinks = run(["pw-dump"], stdout=PIPE).stdout.decode()
    all_sinks = json.loads(sinks)

    # First find the default sink ID
    default_sink_name = None
    for metadata in [s for s in all_sinks if s.get("type") == "PipeWire:Interface:Metadata"]:
        metadata_list = metadata.get("metadata", [])
        for item in metadata_list:
            if item.get("key") == "default.audio.sink":
                default_sink_name = item["value"]["name"]
                break
        if default_sink_name:
            break

    if not default_sink_name:
        return ""

    # Then find the corresponding device/card name
    for sink in all_sinks:
        if (sink.get("type") == "PipeWire:Interface:Node" and
            sink.get("info", {}).get("props", {}).get("node.name") == default_sink_name):
            return sink["info"]["props"].get("alsa.card_name", "")

    return ""


def current_source() -> str:
    sources = run(["pw-dump"], stdout=PIPE).stdout.decode()
    all_sources = json.loads(sources)

    # Find the default source
    default_source_name = None
    for metadata in [s for s in all_sources if s.get("type") == "PipeWire:Interface:Metadata"]:
        metadata_list = metadata.get("metadata", [])
        for item in metadata_list:
            if item.get("key") == "default.audio.source":
                default_source_name = item["value"]["name"]
                break
        if default_source_name:
            break

    if not default_source_name:
        return ""

    # Then find the corresponding device/card name
    for source in all_sources:
        if (source.get("type") == "PipeWire:Interface:Node" and
            source.get("info", {}).get("props", {}).get("node.name") == default_source_name):
            return source["info"]["props"].get("alsa.card_name", "")

    return ""


def set_card_profile(sink_name: str, profile: str) -> None:
    # Use pactl instead of pw-cli for setting card profiles
    run(["pactl", "set-card-profile", sink_name, profile])


def disable_cards(cards, exception) -> None:
    for card in cards:
        if card != exception:
            run(["pactl", "set-card-profile", card, "off"])


# TODO: if card is used as input, set it for IO instead of only output
def decide_card(cards: dict, device_in_use: str, card_type: str) -> Card:
    config_path = get_config_path()
    if not config_path.exists():
        raise Exception("Configuration file not found. Please run with --configure first.")

    with open(config_path) as f:
        config = json.load(f)

    profiles = config.get(card_type, None)
    if profiles is None:
        raise Exception(f"No {card_type} profiles configured. Please run with --configure first.")

    # Filter profiles to only include cards that are currently available
    available_profiles = [p for p in profiles if p["card_name"] in cards]

    if not available_profiles:
        raise Exception(f"No configured {card_type} devices are currently available")

    # Find the current profile in the config and return the next one
    profile_to_use = None
    for i, profile in enumerate(available_profiles):
        if profile["card_name"] == device_in_use:
            profile_to_use = available_profiles[(i + 1) % len(available_profiles)]
            break

    if profile_to_use is None:
        profile_to_use = available_profiles[0]

    # Find the matching card to get the sink name
    matching_card = cards.get(profile_to_use["card_name"])
    sink_name = matching_card.sink_name if matching_card else profile_to_use.get("card_name", "")

    return Card(
        profile_to_use["profile"],
        {"name": profile_to_use["profile"], "available": True, "priority": 1},
        profile_to_use["card_name"],
        sink_name,
        active=True,
        display_name=profile_to_use["card_name"],
    )

def hdmi_connected():
    xorg_running = run(["pgrep", "Xorg"], stdout=DEVNULL).returncode == 0

    if xorg_running:
        monitors = run(
            ["xrandr", "--listactivemonitors"], stdout=PIPE
        ).stdout.decode()
    else:
        monitors = run(
            ["hyprctl", "monitors"], stdout=PIPE
        ).stdout.decode()

    return monitors.find("HDMI") != -1 or monitors.find("DP-2-") != -1 or monitors.find("DP-3") != -1

def get_card_profiles_by_type(card: dict[str, Any], card_type: str) -> list[dict[str, Any]]:
    card_info = card.get("info", {})
    card_attributes = card_info.get("params", {})
    profiles = card_attributes.get("EnumProfile", [])

    # Filter profiles based on type and availability
    matching_profiles = []
    for p in profiles:
        name = p["name"]
        if p.get("available", 'no') == 'no':
            continue

        # Get profile classes
        classes = p.get("classes", [])

        if card_type == CardType.OUTPUT:
            # Output-only profiles: has Audio/Sink but NOT both Audio/Sink and Audio/Source in the same class
            if (any("Audio/Sink" in str(c) for c in classes) and 
                not any(("Audio/Sink" in str(c) and "Audio/Source" in str(c)) for c in classes)):
                matching_profiles.append(p)
                
        elif card_type == CardType.INPUT:
            # Input-only profiles: has Audio/Source but NOT both Audio/Sink and Audio/Source in the same class
            if (any("Audio/Source" in str(c) for c in classes) and 
                not any(("Audio/Sink" in str(c) and "Audio/Source" in str(c)) for c in classes)):
                matching_profiles.append(p)
                
        elif card_type == CardType.IO:
            # IO profiles: has BOTH Audio/Source AND Audio/Sink
            # This matches the logic in get_priority_profile for IO types
            if (any("Audio/Source" in str(c) for c in classes) and 
                any("Audio/Sink" in str(c) for c in classes)):
                matching_profiles.append(p)

    return matching_profiles

def get_cards_by_type(all_cards: list[dict[str, Any]], card_type: str, card_in_use: str) -> dict[str, Card]:
    cards = {}
    for card in all_cards:
        card_info = card.get("info", {})
        card_attributes = card_info.get("props", card_info.get("params", {}))
        card_name = card_attributes.get("alsa.card_name", card_attributes.get("device.product.name", ""))
        display_name = Card.get_display_name(card_attributes)

        # Get profiles from params
        profiles = get_card_profiles_by_type(card, card_type)
        profile_name, profile = get_priority_profile({"profiles": {p["name"]: p for p in profiles}}, card_type)

        if profile is None:
            continue

        sink = card_attributes.get("device.name", "")

        cards[card_name] = Card(
            profile_name,
            profile,
            card_name,
            sink,
            active=sink in card_in_use,
            display_name=display_name if display_name is not None else card_name,
        )

    return cards

def get_all_card_profiles_by_type(all_cards: list[dict[str, Any]], card_type: str) -> dict[str, Any]:
    cards_with_profiles = {}

    for card in all_cards:
        card_info = card.get("info", {})
        card_attributes = card_info.get("props", card_info.get("params", {}))
        card_name = card_attributes.get("alsa.card_name", card_attributes.get("device.name", ""))

        matching_profiles = get_card_profiles_by_type(card, card_type)

        if matching_profiles:
            cards_with_profiles[card_name] = matching_profiles

    return cards_with_profiles

def get_config_path() -> Path:
    config_dir = Path(environ.get("XDG_CONFIG_HOME", Path.home() / ".config"))
    return config_dir / "sound_manager" / "config.json"

def save_card_config(config: dict) -> None:
    config_path = get_config_path()
    config_path.parent.mkdir(parents=True, exist_ok=True)

    print("\nSaving priority order")
    for device_type, profiles in config.items():
        print(f"\n\t{device_type.upper()}")
        for i, profile in enumerate(profiles, 1):
            print(f"\t{i}. {profile['card_name']} - {profile['profile']}")

    with open(config_path, "w") as f:
        json.dump(config, f, indent=2)

    print(f"\nConfiguration saved to {config_path}")

def configure_cards(all_cards: list[dict[str, Any]]) -> None:
    print("\nConfiguring sound profile preference list")
    print("Run this with all sound devices connected so you can configure all your options")

    config = {CardType.OUTPUT: [], CardType.INPUT: []}

    # Handle output and input configurations separately
    for card_type in (CardType.OUTPUT, CardType.INPUT):
        cards_with_profiles = get_all_card_profiles_by_type(all_cards, card_type)

        if not cards_with_profiles:
            continue

        available_card_profiles = []
        for card_name, profiles in cards_with_profiles.items():
            for profile in profiles:
                available_card_profiles.append((card_name, profile["name"]))

        print(f"\nAvailable {card_type.upper()} profiles:")
        for i, (card_name, profile_name) in enumerate(available_card_profiles, 1):
            print(f"\t{i}. {card_name} - {profile_name}")

        order = None
        while order is None:
            try:
                print(f"\nEnter {card_type} profiles in order of priority (e.g., '3,1,2')\nYou can also specify an alias for a profile (e.g., '3,1,2:hdmi')")
                order_input = input(f"\nEnter {card_type} profiles in order of priority: ")
                if not order_input.strip():
                    break

                order = []
                for o in order_input.split(","):
                    alias = None
                    number = None
                    if ":" in o:
                        number = int(o.split(":")[0]) - 1
                        alias = o.split(":")[1]
                    else:
                        number = int(o) - 1

                    order.append((number, alias))

                if any(i < 0 or i >= len(available_card_profiles) for i, _ in order):
                    print("Invalid card numbers. Please try again.")
                    order = None

                if len(order) != len(set(i for i, _ in order)):
                    print("Please don't repeat card numbers.")
                    order = None

                for card_index_and_alias in order:
                    card_index = card_index_and_alias[0]
                    alias = card_index_and_alias[1]
                    card_name, profile_name = available_card_profiles[card_index]
                    config[card_type].append({
                        "card_name": card_name,
                        "profile": profile_name,
                        "alias": alias,
                    })

            except ValueError:
                print("Please enter valid numbers separated by commas.")
            except KeyboardInterrupt:
                return

    if config:
        save_card_config(config)

def _parse_args():
    ap = ArgumentParser(
        "sound_source_toggle",
        description="Toggle sound source between device, bluetooth, and HDMI",
    )
    ap.add_argument(
        "-l", help="List available output and input devices", action="store_true"
    )
    ap.add_argument(
        "-f", help="Format cards info from stdin", action="store_true",
    )
    ap.add_argument("-t", help="Toggle output devices", action="store_true")
    ap.add_argument("-s", nargs=4, metavar=('sink', 'profile', 'card_name', 'card_type ["input", "output", "io"]'), help="Set sink profile manually")
    ap.add_argument(
        "-c", "--configure",
        help="Configure card profiles",
        action="store_true"
    )
    return ap

def list_cards(output_cards, input_cards, io_cards):
    # Try to read config file for aliases
    config_path = get_config_path()
    aliases = {}
    if config_path.exists():
        try:
            with open(config_path) as f:
                config = json.load(f)
                # Build aliases dictionary from both input and output configurations
                for card_type in [CardType.OUTPUT, CardType.INPUT]:
                    for profile in config.get(card_type, []):
                        if profile.get("alias"):
                            aliases[f"{profile['card_name']}:{profile['profile']}"] = profile["alias"]
        except:
            pass  # If there's any error reading config, proceed without aliases

    # Helper function to get card info with possible alias
    def get_card_info(card):
        card_dict = card.__dict__.copy()
        card_key = f"{card.card_name}:{card.profile_name}"
        if card_key in aliases:
            card_dict["display_name"] = aliases[card_key]
        return card_dict

    cards_info = {
        "output": [get_card_info(o) for o in output_cards.values()],
        "input": [get_card_info(o) for o in input_cards.values()],
        "io": [get_card_info(o) for o in io_cards.values()],
    }
    print(json.dumps(cards_info))


# TODO: decide_input
if __name__ == "__main__":
    arg_parser = _parse_args()
    args = arg_parser.parse_args()

    sink_in_use = current_sink()
    source_in_use = current_source()

    all_cards = get_cards()

    output_cards = get_cards_by_type(all_cards, CardType.OUTPUT, sink_in_use)
    input_cards = get_cards_by_type(all_cards, CardType.INPUT, source_in_use)
    io_cards = get_cards_by_type(all_cards, CardType.IO, sink_in_use)
    output_changed = False
    input_changed = False

    if args.t:
        card_to_use = decide_card(output_cards, sink_in_use, CardType.OUTPUT)
        # TODO: Output card is being used as input, set it as IO
        if False:
            card_to_use = io_cards[card_to_use.card_name]
        output_changed = True
    elif args.s:
        sink, profile, card_name, card_type = args.s
        card_to_use = Card(
            profile,
            {"name": profile, "available": 'yes', "priority": 1},
            card_name,
            sink,
        )
        output_changed = card_type.lower() == CardType.OUTPUT or card_type.lower() == CardType.IO
        input_changed = card_type.lower() == CardType.INPUT or card_type.lower() == CardType.IO
    elif args.l or args.f:
        list_cards(output_cards, input_cards, io_cards)
        exit(0)
    elif args.configure:
        configure_cards(all_cards)
        exit(0)
    else:
        arg_parser.print_help()
        exit(0)

    set_card_profile(card_to_use.sink_name, card_to_use.profile_name)

    # turn off other cards
    if output_changed:
        for name, output_card in output_cards.items():
            if card_to_use.card_name == name:
                continue
            set_card_profile(output_card.sink_name, "off")

    if input_changed:
        for name, input_card in input_cards.items():
            if card_to_use.card_name == name:
                continue
            set_card_profile(input_card.sink_name, "off")

    card_type = "IO" if output_changed and input_changed else "Output" if output_changed else "Input"
    notification_header = f"Switched {card_type}"
    notification_body = card_to_use.card_name
    run(["notify-send", notification_header, notification_body])
